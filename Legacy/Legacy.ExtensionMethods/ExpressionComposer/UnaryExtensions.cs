using System;
using System.Linq.Expressions;
using Legacy.Core;
using Legacy.Core.Composition;

namespace Legacy.ExtensionMethods
{
    public static partial class ExpressionComposer
    {
        public static Func<IManipulationUnit, LambdaExpression, IManipulationUnit> ComposeUnary { get; set; } = (unit, lambda) => new UnaryComposer(unit, lambda);

        public static IManipulationOfAction Bind<TOut>(this IManipulationOfFunc<TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TResult> Bind<TOut, TResult>(this IManipulationOfFunc<TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1> Bind<TIn1, TOut>(this IManipulationOfFunc<TIn1, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TResult> Bind<TIn1, TOut, TResult>(this IManipulationOfFunc<TIn1, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2> Bind<TIn1, TIn2, TOut>(this IManipulationOfFunc<TIn1, TIn2, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TResult> Bind<TIn1, TIn2, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3> Bind<TIn1, TIn2, TIn3, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TResult> Bind<TIn1, TIn2, TIn3, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4> Bind<TIn1, TIn2, TIn3, TIn4, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TOut> sourceUnit, Expression<Action<TOut>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TResult> Bind<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TOut> sourceUnit, Expression<Func<TOut, TResult>> bindingFunction) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TResult>(ComposeUnary(sourceUnit, Expression.Lambda(Expression.Quote(Expression.Lambda(bindingFunction.Body, sourceUnit.Parameters)), bindingFunction.Parameters)));
    }
}