using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Legacy.Core;
using Legacy.Core.Remap;

namespace Legacy.ExtensionMethods
{
    public static partial class ExpressionComposer
    {
        public static Func<IManipulationUnit, Dictionary<ParameterExpression, IManipulationUnit>, IManipulationUnit> CreateParameterRemap { get; set; } = (source, replacements) => new ParameterRemapper(source, replacements);
        
        public static Func<IManipulationUnit, LambdaExpression, ParameterExpression, IManipulationUnit> CreateLambdaRemap { get; set; } = (source, remappedExpression, lambdaPlaceholder) => new LambdaRemapper(source, remappedExpression, lambdaPlaceholder);
        
        #region ChainWith
        
                public static IManipulationOfAction<TIn1> ChainWith<TIn1, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));
                public static IManipulationOfAction<TIn1> ChainWith<TIn1, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

                public static IManipulationOfAction<TIn1, TIn> ChainWith<TIn1, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));
                public static IManipulationOfAction<TIn1, TIn> ChainWith<TIn1, TIn, TOut>(this IManipulationOfFunc<TIn1, TOut> prefix, IManipulationOfAction<TIn1, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

                public static IManipulationOfFunc<TIn1, TResult> ChainWith<TIn1, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));
                public static IManipulationOfFunc<TIn1, TResult> ChainWith<TIn1, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn, TResult> ChainWith<TIn1, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn, TResult> ChainWith<TIn1, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2> ChainWith<TIn1, TIn2, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2> ChainWith<TIn1, TIn2, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn> ChainWith<TIn1, TIn2, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn> ChainWith<TIn1, TIn2, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TResult> ChainWith<TIn1, TIn2, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TResult> ChainWith<TIn1, TIn2, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn, TResult> ChainWith<TIn1, TIn2, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn, TResult> ChainWith<TIn1, TIn2, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3> ChainWith<TIn1, TIn2, TIn3, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3> ChainWith<TIn1, TIn2, TIn3, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn> ChainWith<TIn1, TIn2, TIn3, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn> ChainWith<TIn1, TIn2, TIn3, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TResult> ChainWith<TIn1, TIn2, TIn3, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TResult> ChainWith<TIn1, TIn2, TIn3, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4> ChainWith<TIn1, TIn2, TIn3, TIn4, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4> ChainWith<TIn1, TIn2, TIn3, TIn4, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>(this IManipulationOfFunc<TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>(this IManipulationOfFunc<TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));

                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForAction(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));
                public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> prefix, IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult>(this IManipulationOfFunc<TOut> prefix, IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));

                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult>(CreateParameterRemap(ExpressionEngine.CreateManipulationUnitForFunc(suffix), new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));
                public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult> ChainWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut, TResult>(this IManipulationOfFunc<TIn, TOut> prefix, IManipulationOfFunc<TIn1, TOut, TResult> suffix)  => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));
        
        #endregion ChainWith
        
        #region PrefixWith
        
        public static IManipulationOfAction<TIn1> PrefixWith<TIn1, TOut>(this IManipulationOfAction<TIn1, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1> PrefixWith<TIn1, TOut>(this IManipulationOfAction<TIn1, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

        public static IManipulationOfAction<TIn1, TIn> PrefixWith<TIn1, TIn, TOut>(this IManipulationOfAction<TIn1, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn> PrefixWith<TIn1, TIn, TOut>(this IManipulationOfAction<TIn1, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

        public static IManipulationOfFunc<TIn1, TResult> PrefixWith<TIn1, TOut, TResult>(this IManipulationOfFunc<TIn1, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TResult> PrefixWith<TIn1, TOut, TResult>(this IManipulationOfFunc<TIn1, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn, TResult> PrefixWith<TIn1, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn, TResult> PrefixWith<TIn1, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[1], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2> PrefixWith<TIn1, TIn2, TOut>(this IManipulationOfAction<TIn1, TIn2, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2> PrefixWith<TIn1, TIn2, TOut>(this IManipulationOfAction<TIn1, TIn2, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn> PrefixWith<TIn1, TIn2, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn> PrefixWith<TIn1, TIn2, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TResult> PrefixWith<TIn1, TIn2, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TResult> PrefixWith<TIn1, TIn2, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn, TResult> PrefixWith<TIn1, TIn2, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn, TResult> PrefixWith<TIn1, TIn2, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[2], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3> PrefixWith<TIn1, TIn2, TIn3, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3> PrefixWith<TIn1, TIn2, TIn3, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TResult> PrefixWith<TIn1, TIn2, TIn3, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TResult> PrefixWith<TIn1, TIn2, TIn3, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[3], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4> PrefixWith<TIn1, TIn2, TIn3, TIn4, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4> PrefixWith<TIn1, TIn2, TIn3, TIn4, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[4], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[5], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[6], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[7], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[8], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[9], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[10], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[11], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[12], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[13], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[14], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix, Expression<Func<TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult> suffix, IManipulationOfFunc<TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));

        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut> suffix, Expression<Func<TIn, TOut>> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], ExpressionEngine.CreateManipulationUnitForFunc(prefix) } }));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult> PrefixWith<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut, TResult> suffix, IManipulationOfFunc<TIn, TOut> prefix) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult>(CreateParameterRemap(suffix, new Dictionary<ParameterExpression, IManipulationUnit> { { suffix.Parameters[15], prefix } }));
        
        #endregion PrefixWith
        
        #region Apply
        
        public static IManipulationOfAction<TIn1> Apply<TIn1, TIn>(this IManipulationOfAction<TIn1, TIn> source, Expression<Action<TIn1, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0] }), applicationLambda.Parameters[1]));
        public static IManipulationOfAction<TIn1> Apply<TIn1, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn, TOut> source, Expression<Action<TIn1, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0] }), applicationLambda.Parameters[1]));
        public static IManipulationOfFunc<TIn1, TResult> Apply<TIn1, TIn, TResult>(this IManipulationOfAction<TIn1, TIn> source, Expression<Func<TIn1, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0] }), applicationLambda.Parameters[1]));
        public static IManipulationOfFunc<TIn1, TResult> Apply<TIn1, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn, TOut> source, Expression<Func<TIn1, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0] }), applicationLambda.Parameters[1]));

        public static IManipulationOfAction<TIn1, TIn2> Apply<TIn1, TIn2, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn> source, Expression<Action<TIn1, TIn2, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1] }), applicationLambda.Parameters[2]));
        public static IManipulationOfAction<TIn1, TIn2> Apply<TIn1, TIn2, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn, TOut> source, Expression<Action<TIn1, TIn2, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1] }), applicationLambda.Parameters[2]));
        public static IManipulationOfFunc<TIn1, TIn2, TResult> Apply<TIn1, TIn2, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn> source, Expression<Func<TIn1, TIn2, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1] }), applicationLambda.Parameters[2]));
        public static IManipulationOfFunc<TIn1, TIn2, TResult> Apply<TIn1, TIn2, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn, TOut> source, Expression<Func<TIn1, TIn2, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1] }), applicationLambda.Parameters[2]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3> Apply<TIn1, TIn2, TIn3, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn> source, Expression<Action<TIn1, TIn2, TIn3, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2] }), applicationLambda.Parameters[3]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3> Apply<TIn1, TIn2, TIn3, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2] }), applicationLambda.Parameters[3]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TResult> Apply<TIn1, TIn2, TIn3, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn> source, Expression<Func<TIn1, TIn2, TIn3, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2] }), applicationLambda.Parameters[3]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TResult> Apply<TIn1, TIn2, TIn3, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2] }), applicationLambda.Parameters[3]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4> Apply<TIn1, TIn2, TIn3, TIn4, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3] }), applicationLambda.Parameters[4]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4> Apply<TIn1, TIn2, TIn3, TIn4, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3] }), applicationLambda.Parameters[4]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3] }), applicationLambda.Parameters[4]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3] }), applicationLambda.Parameters[4]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4] }), applicationLambda.Parameters[5]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4] }), applicationLambda.Parameters[5]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4] }), applicationLambda.Parameters[5]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4] }), applicationLambda.Parameters[5]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5] }), applicationLambda.Parameters[6]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5] }), applicationLambda.Parameters[6]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5] }), applicationLambda.Parameters[6]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5] }), applicationLambda.Parameters[6]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6] }), applicationLambda.Parameters[7]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6] }), applicationLambda.Parameters[7]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6] }), applicationLambda.Parameters[7]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6] }), applicationLambda.Parameters[7]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7] }), applicationLambda.Parameters[8]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7] }), applicationLambda.Parameters[8]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7] }), applicationLambda.Parameters[8]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7] }), applicationLambda.Parameters[8]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8] }), applicationLambda.Parameters[9]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8] }), applicationLambda.Parameters[9]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8] }), applicationLambda.Parameters[9]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8] }), applicationLambda.Parameters[9]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9] }), applicationLambda.Parameters[10]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9] }), applicationLambda.Parameters[10]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9] }), applicationLambda.Parameters[10]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9] }), applicationLambda.Parameters[10]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10] }), applicationLambda.Parameters[11]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10] }), applicationLambda.Parameters[11]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10] }), applicationLambda.Parameters[11]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10] }), applicationLambda.Parameters[11]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11] }), applicationLambda.Parameters[12]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11] }), applicationLambda.Parameters[12]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11] }), applicationLambda.Parameters[12]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11] }), applicationLambda.Parameters[12]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12] }), applicationLambda.Parameters[13]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12] }), applicationLambda.Parameters[13]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12] }), applicationLambda.Parameters[13]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12] }), applicationLambda.Parameters[13]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13] }), applicationLambda.Parameters[14]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13] }), applicationLambda.Parameters[14]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13] }), applicationLambda.Parameters[14]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13] }), applicationLambda.Parameters[14]));

        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, Expression<Action<TIn>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13], applicationLambda.Parameters[14] }), applicationLambda.Parameters[15]));
        public static IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut> source, Expression<Action<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, Expression<Func<TIn, TOut>>>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13], applicationLambda.Parameters[14] }), applicationLambda.Parameters[15]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult>(this IManipulationOfAction<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, Expression<Action<TIn>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13], applicationLambda.Parameters[14] }), applicationLambda.Parameters[15]));
        public static IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut, TResult>(this IManipulationOfFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TOut> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, Expression<Func<TIn, TOut>>, TResult>> applicationLambda) => ExpressionEngine.CreateManipulationUnitForFunc<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(CreateLambdaRemap(source, Expression.Lambda(applicationLambda.Body, new [] { applicationLambda.Parameters[0], applicationLambda.Parameters[1], applicationLambda.Parameters[2], applicationLambda.Parameters[3], applicationLambda.Parameters[4], applicationLambda.Parameters[5], applicationLambda.Parameters[6], applicationLambda.Parameters[7], applicationLambda.Parameters[8], applicationLambda.Parameters[9], applicationLambda.Parameters[10], applicationLambda.Parameters[11], applicationLambda.Parameters[12], applicationLambda.Parameters[13], applicationLambda.Parameters[14] }), applicationLambda.Parameters[15]));
        
        #endregion Apply
    }
}