using System;
using System.Linq;
using System.Linq.Expressions;
using System.Collections.Generic;
using Legacy.Core;
using Legacy.Core.Composition;
using Legacy.Core.Remap;

namespace Legacy.Source
{
    public static partial class ExpressionSource
    {


        public static IManipulationSource<TIn1, TIn2, TResult> Select<TIn1, TIn2, TOut, TResult>(
            this IManipulationSource<TIn1, TIn2, TOut> source,
            Expression<Func<TIn1, TIn2, TResult>> lambda) => null;


        private static Lazy<ISourceEngine> defaultEngine = new Lazy<ISourceEngine>(() => new SourceEngine());
        public static void SetEngine(ISourceEngine newEngine) => defaultEngine = new Lazy<ISourceEngine>(() => newEngine);

        internal static IManipulationUnit SelectMany(IManipulationUnit source, IManipulationUnit newSource, LambdaExpression compositionFunction) => defaultEngine.Value.CreateBinary(source, newSource, Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters));
        internal static IManipulationUnit Apply(IManipulationUnit source, LambdaExpression lambda) => CreateLambdaRemap(source, Expression.Lambda(lambda.Body, lambda.Parameters.Take(lambda.Parameters.Count - 1)), lambda.Parameters[lambda.Parameters.Count - 1]);

        public static Func<IManipulationUnit, Dictionary<ParameterExpression, IManipulationUnit>, IManipulationUnit> CreateParameterRemap { get; set; } = (source, replacements) => new ParameterRemapper(source, replacements);
        public static Func<IManipulationUnit, LambdaExpression, ParameterExpression, IManipulationUnit> CreateLambdaRemap { get; set; } = (source, remappedExpression, lambdaPlaceholder) => new LambdaRemapper(source, remappedExpression, lambdaPlaceholder);

        public static IManipulationSource<TResult> ToUnit<TResult>(Expression<Func<TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TResult> ToUnit<TIn1, TResult>(Expression<Func<TIn1, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TResult> ToUnit<TIn1, TIn2, TResult>(Expression<Func<TIn1, TIn2, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TResult> ToUnit<TIn1, TIn2, TIn3, TResult>(Expression<Func<TIn1, TIn2, TIn3, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>> lambda) => defaultEngine.Value.Create(lambda);
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TResult> ToUnit<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TResult>(Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TResult>> lambda) => defaultEngine.Value.Create(lambda);

        public static IManipulationSource<TIn1, TResult> Apply<TIn1, TIn, TResult>(this IManipulationSource<TIn1, TIn, TResult> source, Expression<Func<TIn1, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0] }), lambda.Parameters[1]));
        public static IManipulationSource<TIn1, TIn2, TResult> Apply<TIn1, TIn2, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn, TResult> source, Expression<Func<TIn1, TIn2, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1] }), lambda.Parameters[2]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TResult> Apply<TIn1, TIn2, TIn3, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2] }), lambda.Parameters[3]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3] }), lambda.Parameters[4]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4] }), lambda.Parameters[5]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5] }), lambda.Parameters[6]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6] }), lambda.Parameters[7]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7] }), lambda.Parameters[8]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7], lambda.Parameters[8] }), lambda.Parameters[9]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7], lambda.Parameters[8], lambda.Parameters[9] }), lambda.Parameters[10]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7], lambda.Parameters[8], lambda.Parameters[9], lambda.Parameters[10] }), lambda.Parameters[11]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7], lambda.Parameters[8], lambda.Parameters[9], lambda.Parameters[10], lambda.Parameters[11] }), lambda.Parameters[12]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7], lambda.Parameters[8], lambda.Parameters[9], lambda.Parameters[10], lambda.Parameters[11], lambda.Parameters[12] }), lambda.Parameters[13]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7], lambda.Parameters[8], lambda.Parameters[9], lambda.Parameters[10], lambda.Parameters[11], lambda.Parameters[12], lambda.Parameters[13] }), lambda.Parameters[14]));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> Apply<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn, TResult> source, Expression<Func<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, Expression<Func<TIn, TResult>>, TResult>> lambda) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(CreateLambdaRemap(source, Expression.Lambda(lambda.Body, new [] { lambda.Parameters[0], lambda.Parameters[1], lambda.Parameters[2], lambda.Parameters[3], lambda.Parameters[4], lambda.Parameters[5], lambda.Parameters[6], lambda.Parameters[7], lambda.Parameters[8], lambda.Parameters[9], lambda.Parameters[10], lambda.Parameters[11], lambda.Parameters[12], lambda.Parameters[13], lambda.Parameters[14] }), lambda.Parameters[15]));

        public static IManipulationSource<TResult> SelectMany<TOut1, TOut2, TResult>(this IManipulationSource<TOut1> source, Expression<Func<TOut1, IManipulationSource<TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TResult> SelectMany<TIn1, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TResult> SelectMany<TIn1, TIn2, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TResult> SelectMany<TIn1, TIn2, TIn3, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
        public static IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TResult> SelectMany<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TOut1, TOut2, TResult>(this IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TOut1> source, Expression<Func<TOut1, IManipulationSource<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TOut2>>> newSource, Expression<Func<TOut1, TOut2, TResult>> compositionFunction) => defaultEngine.Value.Cast<TIn1, TIn2, TIn3, TIn4, TIn5, TIn6, TIn7, TIn8, TIn9, TIn10, TIn11, TIn12, TIn13, TIn14, TIn15, TIn16, TResult>(new BinaryComposer(source, new UnitExtractor(newSource).Extract(), Expression.Lambda(Expression.Lambda(compositionFunction.Body, source.Parameters), compositionFunction.Parameters)));
    }
}